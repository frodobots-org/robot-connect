#include <fcntl.h>
#include <string.h>
#include <teleop_ctrl_plugin.h>
#include <termios.h>
#include <unistd.h>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <iostream>
#include <mutex>
#include <nlohmann/json.hpp>
#include <queue>
#include <string>
#include <thread>

using json = nlohmann::json;

#define SERIAL_DEVICE "/dev/ttyS0"

typedef struct ucp_hd {
  uint16_t len;
  uint8_t id;
  uint8_t index;
} ucp_hd_t;

typedef struct ucp_ctl_cmd {
  ucp_hd_t hd;
  int16_t speed;
  int16_t angular;
  int16_t front_led;
  int16_t back_led;
  uint16_t version;
  uint16_t reserve1;
  uint32_t reserve2;
} ucp_ctl_cmd_t;

typedef struct uart_cmd {
  uint8_t* data;
  int len;
} uart_cmd_t;

static const uint8_t crc_hi_table[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40};

static const uint8_t crc_lo_table[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
    0x40};

static uint16_t crc16(uint8_t* msg, size_t len) {
  uint8_t crc_hi = 0xFF;
  uint8_t crc_lo = 0xFF;
  uint8_t index;

  while (len--) {
    index = crc_lo ^ *msg++;
    crc_lo = crc_hi ^ crc_hi_table[index];
    crc_hi = crc_lo_table[index];
  }
  return (crc_hi << 8 | crc_lo);
}

void send_ctl_cmd(int fd, uint16_t linear, uint16_t angular) {
  ucp_ctl_cmd_t ctl_cmd = {0};
  ctl_cmd.hd.len = sizeof(ucp_ctl_cmd_t);
  ctl_cmd.hd.id = 0x2;
  ctl_cmd.hd.index = 0;
  ctl_cmd.speed = linear;
  ctl_cmd.angular = angular;
  ctl_cmd.front_led = 0;
  ctl_cmd.back_led = 0;
  ctl_cmd.version = 0;
  ctl_cmd.reserve1 = 0;
  ctl_cmd.reserve2 = 0;

  uint16_t head = 0xfffd;
  uint16_t crc;
  uart_cmd_t cmd = {0};
  cmd.data = (uint8_t*)malloc(sizeof(ucp_ctl_cmd_t) + 5);
  cmd.len = sizeof(ucp_ctl_cmd_t) + 4;
  memcpy(cmd.data, &head, 2);
  memcpy(cmd.data + 2, &ctl_cmd, sizeof(ucp_ctl_cmd_t));
  crc = crc16((uint8_t*)cmd.data, sizeof(ucp_ctl_cmd_t) + 2);
  memcpy(cmd.data + 2 + sizeof(ucp_ctl_cmd_t), &crc, 2);

  ssize_t len = write(fd, cmd.data, cmd.len);
  if (len < 0) {
    fprintf(stderr, "send_ctl_cmd failed: %s\n", strerror(errno));
  }
  if (cmd.data) {
    free(cmd.data);
  }
}

class TeleopCtrlEarthRover : public TeleopCtrlPlugin {
 public:
  TeleopCtrlEarthRover();
  void Invoke() override;
  void Terminate() override;
  void OnMessageReceived(const char* message) override;

 private:
  bool is_running_ = false;
  std::mutex cmd_mutex_;
  std::condition_variable cmd_cv_;
  std::queue<json> cmd_queue_;
};

TeleopCtrlEarthRover::TeleopCtrlEarthRover() {
}

void TeleopCtrlEarthRover::OnMessageReceived(const char* data) {
  json j = json::parse(data);
  if (j.contains("data")) {
    std::lock_guard<std::mutex> lock(cmd_mutex_);
    cmd_queue_.push(j["data"]);
    cmd_cv_.notify_one();
  }
}

void TeleopCtrlEarthRover::Terminate() {
  is_running_ = false;
}

void TeleopCtrlEarthRover::Invoke() {
  is_running_ = true;
  fprintf(stdout, "Invoke\n");
  int fd;
  fd = open(SERIAL_DEVICE, O_RDWR | O_NOCTTY | O_SYNC);
  if (fd < 0) {
    fprintf(stderr, "Open serial port %s failed: %s\n", SERIAL_DEVICE, strerror(errno));
    return;
  }

  while (is_running_) {
    // if timeout, send stop command
    std::unique_lock<std::mutex> lock(cmd_mutex_);
    if (cmd_cv_.wait_for(lock, std::chrono::milliseconds(500), [this] { return !cmd_queue_.empty(); })) {
      json cmd = cmd_queue_.front();
      cmd_queue_.pop();
      lock.unlock();
      if (cmd.contains("axes")) {
        auto axes = cmd["axes"];
        if (axes.is_array() && axes.size() > 2) {
          float linear = -axes.get<std::vector<float>>()[1] * 0.5;    // forward/backward
          float angular = axes.get<std::vector<float>>()[2] * 0.3;    // left/right
          int16_t linear_cmd = static_cast<int16_t>(linear * 100);    // scale to -100 to 100
          int16_t angular_cmd = static_cast<int16_t>(angular * 100);  // scale to -100 to 100
          send_ctl_cmd(fd, linear_cmd, angular_cmd);
        }
      }
      // fprintf(stdout, "cmd: %s\n", cmd.dump().c_str());
    } else {
      // timeout, send stop command
      send_ctl_cmd(fd, 0, 0);
      continue;
    }
  }

  close(fd);
}

extern "C" TeleopCtrlPlugin* create_plugin() {
  return new TeleopCtrlEarthRover();
}
